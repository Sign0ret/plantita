"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/V5llcFf28RA
 */
import { useState, useEffect } from "react";

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { CardTitle, CardDescription, CardHeader, CardContent, Card, } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

import { get, ref } from "firebase/database";
import { database } from "../../app/firebaseConfig";
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/ui/drawer"

export function Dashboard() {
  const [humidity, setHumidity] = useState<number>(0);
  const [temperature, setTemperature] = useState<number>(0);
  const [lastHours, setLastHours] = useState<number>(0);
  const [lastMinutes, setLastMinutes] = useState<number>(0);
  const [Presence, setPresence] = useState<boolean>(false);
  useEffect(() => {
    // Define a function to fetch data
    const fetchData = () => {
      const humidityRef = ref(database, 'humidity');
      get(humidityRef).then((snapshot) => {
        if (snapshot.exists()) {
          setHumidity(snapshot.val());
        }
      }).catch((error) => {
        console.error(error);
      });
      
      const Presenceref = ref(database, 'presencia');
      get(Presenceref).then((snapshot) => {
        if (snapshot.exists()) {
          setPresence(snapshot.val());
          console.log('snapshotPresencia:',snapshot.val());
        }
      }).catch((error) => {
        console.error(error);
      });
      
      const temperatureRef = ref(database, 'temp');
      get(temperatureRef).then((snapshot) => {
        if (snapshot.exists()) {
          setTemperature(snapshot.val());
        }
      }).catch((error) => {
        console.error(error);
      });
      
      const lastRef = ref(database, 'last');
      get(lastRef).then((snapshot) => {
        if (snapshot.exists()) {
          const hours: number = Math.floor(snapshot.val() / 60);
          const minutes: number = snapshot.val() % 60;
          setLastHours(hours);
          setLastMinutes(minutes);
        }
      }).catch((error) => {
        console.error(error);
      });
    };
  
    // Call fetchData immediately
    fetchData();
  
    // Set interval to call fetchData every 10 seconds
    const interval = setInterval(fetchData, 10000);
  
    // Cleanup interval on unmount
    return () => clearInterval(interval);
  }, []);
  
  return (
    <div className="flex flex-col min-h-screen w-full items-center justify-center gap-2 p-4 md:gap-0 md:flex-row md:max-h-[calc(100vh_-_theme(spacing.16))] lg:gap-4 xl:max-h-[calc(100vh_-_theme(spacing.12))]">
      <main className="flex flex-col w-full gap-4 md:gap-2 lg:gap-4 xl:gap-8 md:grid-rows-1">
        <div className="flex items-center md:flex-col md:items-start md:gap-2 lg:gap-4 xl:gap-8">
          <h1 className="text-3xl font-bold tracking-tighter md:text-2xl xl:text-4xl">Smart Plant Regulator</h1>
          {/* <Button className="ml-auto md:ml-0" size="sm" variant="outline">
            Connect Device
          </Button> */}
        </div>
        <div className="grid gap-4 md:grid-cols-2 xl:gap-8">
          <Card className="p-0">
            <CardHeader className="p-6 rounded-none">
              <div className="flex items-center gap-4">
                <DropletIcon className="w-8 h-8" />
                <div className="grid gap-1">
                  <CardTitle>Humidity</CardTitle>
                  <CardDescription>Current humidity level</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-6 flex items-center justify-center">
              <div className="text-5xl font-bold tracking-tighter peer-disabled:select-none">
                {humidity}
                <span className="text-2xl font-normal peer:translate-x-2">%</span>
              </div>
            </CardContent>
          </Card>
          <Card className="p-0">
            <CardHeader className="p-6 rounded-none">
              <div className="flex items-center gap-4">
                <TempIcon className="w-8 h-8" />
                <div className="grid gap-1">
                  <CardTitle>Temperature</CardTitle>
                  <CardDescription>Current temperature at the location</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-6 flex items-center justify-center">
              <div className="text-5xl font-bold tracking-tighter peer-disabled:select-none">
                {temperature}
                <span className="text-2xl font-normal peer:translate-x-2">°</span>
              </div>
            </CardContent>
          </Card>
        </div>
        <div className="grid gap-4 md:grid-cols-2 xl:gap-8">
          <Card>
            <CardHeader className="p-4">
              <CardTitle>Watering</CardTitle>
              {/* <CardDescription>History of past waterings</CardDescription> */}
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-auto w-full">
                <table className="w-full border-collapse text-sm peer-children:grid-rows-none">
                  <thead className="peer-children:contents">
                    <tr className="border-t">
                      <th className="p-4 font-normal text-left peer:transition-colors peer:duration-150 peer:hover:bg-gray-100 dark:peer:hover:bg-gray-800">
                        Last
                      </th>
                      <th className="p-4 font-normal text-left peer:transition-colors peer:duration-150 peer:hover:bg-gray-100 dark:peer:hover:bg-gray-800">
                        {lastHours}:{lastMinutes} {lastHours < 12 ? 'AM' : 'PM'}
                      </th>
                    </tr>
                    <tr className="border-t">
                      <th className="p-4 font-normal text-left peer:transition-colors peer:duration-150 peer:hover:bg-gray-100 dark:peer:hover:bg-gray-800">
                        Next
                      </th>
                      <th className="p-4 font-normal text-left peer:transition-colors peer:duration-150 peer:hover:bg-gray-100 dark:peer:hover:bg-gray-800">
                        {lastHours}:{lastMinutes} {lastHours < 12 ? 'AM' : 'PM'}
                      </th>
                    </tr>
                  </thead>
                </table>
              </div>
            </CardContent>
          </Card>
{/*           <Card>
            <CardHeader className="p-4">
              <CardTitle>Water config</CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-auto w-full">
                <table className="w-full border-collapse text-sm peer-children:grid-rows-none">
                  <thead className="peer-children:contents">
                    <tr className="border-t">
                      <th className="p-4 font-normal text-left peer:transition-colors peer:duration-150 peer:hover:bg-gray-100 dark:peer:hover:bg-gray-800">
                        Last
                      </th>
                      <th className="p-4 font-normal text-left peer:transition-colors peer:duration-150 peer:hover:bg-gray-100 dark:peer:hover:bg-gray-800">
                        {lastHours}:{lastMinutes} {lastHours < 12 ? 'AM' : 'PM'}
                      </th>
                    </tr>
                  </thead>
                </table>
              </div>
            </CardContent>
          </Card>*/}
           <Card> 
          <CardHeader className="p-4 justify-between flex-row">
            <CardTitle>Presence</CardTitle>
            <Badge className="badge-lg">{Presence ? 'True' : 'False'}</Badge>
            {/* <CardDescription>History of past waterings</CardDescription> */}
          </CardHeader>
        </Card>
        </div>
       
        <Drawer>
  <DrawerTrigger>Nosotros</DrawerTrigger>
  <DrawerContent>
    <DrawerHeader>
      <DrawerTitle>Plantita es un prototipo de sistema de riego automático</DrawerTitle>
      <DrawerDescription>Conoce nuestro código.</DrawerDescription>
    </DrawerHeader>
    <DrawerFooter>
      {/* <Button>Submit</Button> */}
      <DrawerClose>
        <Button variant="outline">Cerrar</Button>
      </DrawerClose>
    </DrawerFooter>
  </DrawerContent>
</Drawer>

      </main>
    </div>
  )
}

interface IconProps extends React.SVGProps<SVGSVGElement> {
  className?: string;
}
function FrameIcon({ className, ...rest }: IconProps) {
  return (
    <svg
      {...rest}
      className={className}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="22" x2="2" y1="6" y2="6" />
      <line x1="22" x2="2" y1="18" y2="18" />
      <line x1="6" x2="6" y1="2" y2="22" />
      <line x1="18" x2="18" y1="2" y2="22" />
    </svg>
  )
}


function UploadCloudIcon({ className, ...rest }: IconProps) {
  return (
    <svg
      {...rest}
      className={className}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" />
      <path d="M12 12v9" />
      <path d="m16 16-4-4-4 4" />
    </svg>
  )
}


function SettingsIcon({ className, ...rest }: IconProps) {
  return (
    <svg
      {...rest}
      className={className}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}


function DropletIcon({ className, ...rest }: IconProps) {
  return (
    <svg
      {...rest}
      className={className}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z" />
    </svg>
  )
}


function ClockIcon({ className, ...rest }: IconProps) {
  return (
    <svg
      {...rest}
      className={className}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  )
}

function TempIcon({ className, ...rest }: IconProps) {
  return (
    <svg  {...rest}className={className} viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#ffffff"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M15 4H20M15 8H20M17 12H20M8 15.9998C7.44772 15.9998 7 16.4475 7 16.9998C7 17.5521 7.44772 17.9998 8 17.9998C8.55228 17.9998 9 17.5521 9 16.9998C9 16.4475 8.55228 15.9998 8 15.9998ZM8 15.9998V9M8 16.9998L8.00707 17.0069M12 16.9998C12 19.209 10.2091 20.9998 8 20.9998C5.79086 20.9998 4 19.209 4 16.9998C4 15.9854 4.37764 15.0591 5 14.354L5 6C5 4.34315 6.34315 3 8 3C9.65685 3 11 4.34315 11 6V14.354C11.6224 15.0591 12 15.9854 12 16.9998Z" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
  )
}